<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:ns1="Component.*" width="960" height="600" 
		   borderStyle="solid" borderColor="0x000000" backgroundColor="0xffffff"   styleName="taskDetailBG"
		   verticalCenter="0" horizontalCenter="0" verticalScrollPolicy="off" horizontalScrollPolicy="off"
		   creationComplete="initEvent()"  
		    enterFrame="canvas1_enterFrameHandler(event)">
	
	<mx:Script>
		<![CDATA[
			import Class.Game;
			import Class.LanguageManager;
			import Class.Model.Card;
			import Class.Model.Desk;
			import Class.Model.Player;
			import Class.Resource;
			import Class.Server;
			import Class.TimesCtr;
			import Class.WebResource;
			
			import Interface.ICardOwner;
			
			import com.cell.util.StringUtil;
			import com.fc.lami.Messages.CardData;
			import com.fc.lami.Messages.GameOverNotify;
			import com.fc.lami.Messages.PlayerData;
			import com.fc.lami.ui.LamiSwfLoader;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.effects.Move;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			[Bindable]
			public var desk:Desk;
			
			public var player:PlayerData; //玩家
			[Bindable]
			public var seatID:int;
			
			
			[Bindable]
			public var game:Game
			
			[Bindable]
			public var talkinfoStr:String=""; 
			
			[Bindable]
			public var gameinfoStr:String="";
			
			public var resetCpt:Reset_Cpt;
			public var canReset:Boolean = false;
			public var canShowReset:Boolean = false;
			
			private var beginSwf : LamiSwfLoader = new LamiSwfLoader(WebResource.start_swf);
			
			private var yhSwf : LamiSwfLoader = new LamiSwfLoader(WebResource.fireworks_swf);

				
			//初始游戏
			public function init():void
			{
				game.matrix = mx;
				game.gamer.matrix = umx;
				game.timeCtr.optionTimeBar = optbar;
				game.timeCtr.sumTimeBar = sumbar;
				optCpt.game = game;
				
				mx.init(this, false);
				umx.init(this, true);
				game.initGame();
				
				yhSwf.setStyle("horizontalCenter","0" );
				yhSwf.setStyle("verticalCenter","0" );
			}
			
			[Bindable]
			public function isStartedGame() : Boolean	
			{
				//if (desk != null) {
				//	return desk.is_started;
				//}
				return true;
			}
			
			public function initEvent():void
			{
				addEventListener(KeyboardEvent.KEY_DOWN,keyDownHandle);
				addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			public function keyDownHandle(event:KeyboardEvent):void
			{
				if( event.keyCode==13&&titalk.text!='')
				{
					pubTalk(); 
				}
			}
			
			
			
			public function initDesk(desk:Desk,playerstats:Array):void
			{
				if(game.matrix==null)
				{
					init();
				}
				nextPlayer1.reset();
				nextPlayer2.reset();
				nextPlayer3.reset();
				nextPlayer4.reset();
				resetGameAllData();
				optCpt.reset();
				player = Server.player;
				game.isStarted = desk.is_started;
				initSeat(desk,playerstats);
			}
			
			
			//进入一个新房间后对所有数据进行重置
			public function resetGameAllData():void
			{
				game.cleanMatrix();
				game.gamer.cleanAllCard();
				game.gamer.isMyturn = false;
				game.gamer.isReady = false;
				game.gamer.isCold = true;
				game.legaled = true;
				//				game.haveSendCard = false;
				game.timeCtr.stop();
				
				
			}
			
			//初始位置
			private function initSeat(desk:Desk,playerstats:Array):void
			{
				nextPlayer1.nextOtherPlayer_Cpt = nextPlayer2;
				nextPlayer2.nextOtherPlayer_Cpt = nextPlayer3;
				nextPlayer3.nextOtherPlayer_Cpt = nextPlayer4;
				//				nextPlayer4.nextOtherPlayer_Cpt = nextPlayer1;
				
				this.desk = desk;
				seatID = 3;
				switch(player.player_id)
				{
					case desk.player_E_id: seatID = 3;break;
					case desk.player_N_id: seatID = 0;break;
					case desk.player_S_id: seatID = 2;break;
					case desk.player_W_id: seatID = 1;break;
				}
				var cpt:OtherPlayer_Cpt = nextPlayer1;
				var index:int = seatID;
				do{
					index ++;
					if(index==4)
						index = 0;
					cpt.player = Server.getPlayer(getPlayerIDbySeatID(index));
					cpt.setState(playerstats);
					
					cpt.seat = getDir(index);
					cpt = cpt.nextOtherPlayer_Cpt;
				}
				while(cpt != null)
			}
			
			public function playerSit(pid:int, seat:int):void
			{
				var t:int = 4+seat-seatID;
				t = t%4;
				var cpt:OtherPlayer_Cpt;
				switch (t){
					case 0: cpt = nextPlayer4;break;
					case 1: cpt = nextPlayer1;break;
					case 2: cpt = nextPlayer2;break;
					case 3: cpt = nextPlayer3;break;
				}
				
				cpt.player = Server.getPlayer(pid);
			}
			
			//根据座位号获取选手
			private function getPlayerIDbySeatID(seatID:int):int
			{
				switch(seatID)
				{
					case 3: return desk.player_E_id;
					case 0: return desk.player_N_id;
					case 2: return desk.player_S_id;
					case 1: return desk.player_W_id;
				}
				return -1;
			}
			
			//根据座位号设置选手
			private function setPlayerIDbySeatID(seatID:int,playerID:int):void
			{
				switch(seatID)
				{
					case 3: desk.player_E_id = playerID;break;
					case 0: desk.player_N_id = playerID;break;
					case 2: desk.player_S_id = playerID;break;
					case 1: desk.player_W_id = playerID;break;
				}
			}
			
			//根据座位号获取方向
			public function getDir(seatID:int):String
			{
				switch(seatID)
				{
					case 0: return "南";
					case 1: return "西";
					case 2: return "北";
					case 3: return "东";
				}
				return "false";
			}
			
			//有人员进入
			public function enterPlayer(player_id:int, desk_id:int, seat:int):void
			{
				if(desk ==null || desk_id!=desk.getDeskID())
					return;
				
				playerSit(player_id, seat);
				addInfo(Server.getPlayerName(Server.getPlayer(player_id))+LanguageManager.getText("lami.jrzz")); //进入桌子
			}
			
			
			//有人员离开
			public function leavePlayer(player_id:int, desk_id:int):void
			{
				if(desk ==null || desk_id!=desk.getDeskID())
					return	;
				var opc:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(player_id);
				opc.player = null;
				addInfo(Server.getPlayerName(Server.getPlayer(player_id))+LanguageManager.getText("lami.lkzz")); //离开桌子
			}
			
			
			public function click():void
			{
				//LamiAlert.show(Game.getSendPoint().toString()+'_'+Game.gamer.keydwon);
			}
			
			public function addInfo(str:String):void
			{
				gameinfoStr =   gameinfoStr  + str + "\n" ;
				TA_gameinfoStr.validateNow();
				TA_gameinfoStr.verticalScrollPosition=TA_gameinfoStr.maxVerticalScrollPosition;
				
				
			}
			
			public function addTalkInfo(str:String):void
			{
				talkinfoStr = talkinfoStr  + str + "\n";
				TA_talkinfoStr.validateNow(); 
				TA_talkinfoStr.verticalScrollPosition=TA_talkinfoStr.maxVerticalScrollPosition;		
				
				//LamiAlert.show(TA_talkinfoStr.verticalScrollPosition +'/' +TA_talkinfoStr.maxVerticalScrollPosition)
			}
			
			//回到房间
			public function returnRoom():void
			{
				//this.visible = false;
				//				Server.app.removeChild(this);
				Server.leaveDesk();
				
			}
			
			//响应回到房间
			public function stopTime():void
			{
				nextPlayer1.gameing = false;
				nextPlayer2.gameing = false;
				nextPlayer3.gameing = false;
				nextPlayer4.gameing = false;
				
				Server.game.timeCtr.stop();
			}
			
			
			//根据用户ID获取用户组建
			public function getOtherPlayerCptByPlayerId(playerid:int):OtherPlayer_Cpt
			{
				var cpt:OtherPlayer_Cpt = nextPlayer1;
				do{
					if(cpt.player!=null && cpt.player.player_id==playerid)
					{
						return cpt;
					}
					cpt = cpt.nextOtherPlayer_Cpt;
				}
				while(cpt!=null)
				return null	
			}
			
			//有人员破冰
			public function onPlayerPoBing(playerid:int):void
			{
				if (playerid == Server.player.player_id){
					game.gamer.isCold = false;
				}else{
					var cpt:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(playerid);
					if(cpt!=null)
						cpt.pobing = true;
				}
				addInfo(LanguageManager.getText('lami.wj')+Server.getPlayerName(Server.getPlayer(playerid))+LanguageManager.getText("lami.yjpb")); //已经破冰
			}
			
			//有人员准备取消
			public function onPlayerReady(playerid:int,isReady:Boolean):void
			{
				if (playerid == Server.player.player_id){
					game.gamer.isReady = isReady;
				}else{
					var cpt:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(playerid);
					if(cpt!=null)
						cpt.ready = isReady;
				}
				
				if(isReady)
				{
					addInfo(LanguageManager.getText('lami.wj')+Server.getPlayerName(Server.getPlayer(playerid))+LanguageManager.getText('lami.zbhl')); //准备好了
				}
				else
				{
					addInfo(LanguageManager.getText('lami.wj')+Server.getPlayerName(Server.getPlayer(playerid))+LanguageManager.getText('lami.qxzb')); //取消了准备
				}
			}
			
			//有人员会合开始
			public function onPlayerStart(playerid:int):void
			{
				var cpt:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(playerid);
				if(cpt!=null)
				{
					cpt.gameing = true;
					addInfo(LanguageManager.getText('lami.wj')+Server.getPlayerName(cpt.player)+LanguageManager.getText('lami.hhks')); //回合开始
				}
			}
			
			//游戏结束
			public function onGameOver(gvn:GameOverNotify):void
			{
				addInfo(LanguageManager.getText('lami.yxjs')); //游戏结束
				
				removeReset();
				stopTime();
				var rsCpt:Result_Cpt = new Result_Cpt()
				optCpt.reset();	
				
				rsCpt.setRes(gvn);
				rsCpt.setStyle("verticalCenter","0");
				rsCpt.setStyle("horizontalCenter","0");	
				addChild(rsCpt);
				rsCpt.addEventListener(Event.REMOVED,removeResultHandle);
				//resetGameAllData();
				//				if(game.gamer.selectedArrayCard != null)
				//				{
				//					for each(var card:Card in game.gamer.selectedArrayCard)
				//					{
				//						card.cardUI.isSelected = false;
				//					}
				//					game.gamer.selectedArrayCard = null;
				//					
				//				}	
				StopMotionList();
				playFireMoiveClip();
			}
			
			
			public function removeResultHandle(event:Event):void
			{
				nextPlayer1.gameEnd();
				nextPlayer2.gameEnd();
				nextPlayer3.gameEnd();
				nextPlayer4.gameEnd();
				resetGameAllData();
				stopFireMoiveClip();
				cleanCardState();
			}
			
			
			
			public function onGameStart(canReset:Boolean):void
			{
				addInfo(LanguageManager.getText('lami.yxks'));  //游戏开始
				if(resetCpt!=null)
					removeReset();
				
				optCpt.Start();
				
				this.canReset = canReset;
				canShowReset = true;
				showReset();
				nextPlayer1.gameStart();
				nextPlayer2.gameStart();
				nextPlayer3.gameStart();
				nextPlayer4.gameStart();
			}
			
			
			public function showReset():void
			{
				if(!canShowReset){
					return;
				} else	{
					canShowReset = false
				}
				
				if(resetCpt!=null)
					removeReset();
				
				resetCpt = new Reset_Cpt();
				resetCpt.canReset = canReset;
				resetCpt.setStyle("verticalCenter","0");
				resetCpt.setStyle("horizontalCenter","0");	
				addChild(resetCpt);
			}
			
			public function removeReset():void
			{
				if (resetCpt!=null){
					removeChild(resetCpt);
					resetCpt = null;
				}
			}
			
			public function pubTalk():void
			{
				if(titalk.text=="")
					return;
				
				if (Server.sendTalkMessage(titalk.text))
					titalk.text='';
			}
			
			public function onPlayerReset(player:PlayerData):void
			{
				
				addInfo(Server.getPlayerName(player)+LanguageManager.getText("lami.czfp")) //重置了发牌
				
			}
			
			private var curMoveCard :Card_Move;
			private var cur_move:Move;
			
			public function addCardMotionList(list:ArrayCollection):void
			{
				var move_card : Card_Move = new Card_Move();
				var cardcpt : Card_Cpt = list.removeItemAt(0) as Card_Cpt;
				move_card.setCurCardCpt(cardcpt);
				
				addChild(move_card);
				move_card.x = cardstack.getVisibleRect().x;
				move_card.y = cardstack.getVisibleRect().y;
				var move:Move = new Move();
				
				move.target = move_card;
				move.duration = 300;
				
				move.xTo = cardcpt.getVisibleRect().x;
				move.yTo = cardcpt.getVisibleRect().y;
				move.addEventListener(EffectEvent.EFFECT_END,cardMotionListComplate);
				
				cardcpt = list.removeItemAt(0) as Card_Cpt;
				var move_card2 : Card_Move;
				while (cardcpt!=null){
					move_card2 = new Card_Move();
					move_card.nextCardm = move_card2;
					move_card = move_card2;
					move_card.setCurCardCpt(cardcpt);
					move_card.x = cardstack.getVisibleRect().x;
					move_card.y = cardstack.getVisibleRect().y;
					if (list.length>0){
						cardcpt = list.removeItemAt(0) as Card_Cpt;
					}else{
						cardcpt = null;
					}
				}
				move.play();
			}
			
			public function creatHandle(event:Event):void
			{
				curMoveCard = event.target as Card_Move;
				(event.target as Card_Move).tl.play();
				
			}

			public function cardMotionListComplate(event:EffectEvent):void
			{
				var move:Move = event.target as Move;
				var card:Card_Move = move.target as Card_Move;
				if (card!=null){
					if (card.parent==this){
						removeChild(card);
					}
					card.curCardCpt.isShow = true;
					
					if (card.nextCardm!=null){
						var move_card:Card_Move = card.nextCardm;
						addChild(move_card);
						var move:Move = new Move();
						
						move.target = move_card;
						move.duration = 300;
						
						move.xTo = move_card.curCardCpt.getVisibleRect().x;
						move.yTo = move_card.curCardCpt.getVisibleRect().y;
						move.addEventListener(EffectEvent.EFFECT_END,cardMotionListComplate);
						cur_move = move;
						move.play();
					}else{
						Server.sendGetCardOverRequest();
						cur_move = null;
						game.gamer.canOpearation = true;
						optCpt.openOrder();
					}
				}
			}
			
			public function cardMotionComplate(event:EffectEvent):void
			{
				var move:Move = event.target as Move;
				var card:Card_Move = move.target as Card_Move;
				if (card!=null){
					if (card.parent==this){
						removeChild(card);
					}
					card.curCardCpt.isShow = true;
					
				}
			}
			
			public function addCardMotion(cardcpt:Card_Cpt):void
			{
				var move_card:Card_Move = new Card_Move();
				cardcpt.isShow = false;
				move_card.setCurCardCpt(cardcpt);
				addChild(move_card);
				move_card.x = cardstack.getVisibleRect().x;
				move_card.y = cardstack.getVisibleRect().y;
				
				var move:Move = new Move();
				
				move.target = move_card;
				move.duration = 300;
				
				move.xTo = cardcpt.getVisibleRect().x;
				move.yTo = cardcpt.getVisibleRect().y;
				
				move.addEventListener(EffectEvent.EFFECT_END, cardMotionComplate);
				move.play();
			}
			
			public function moveCardMotion(cardcpt:Card_Cpt, start:Rectangle, end:Rectangle = null):void
			{
				var move_card:Card_Move = new Card_Move();
				cardcpt.isShow = false;
				move_card.setCurCardCpt(cardcpt);
				addChild(move_card);
				move_card.x = start.x;
				move_card.y = start.y;
				
				var move:Move = new Move();
				
				move.target = move_card;
				move.duration = 300;
				if (end!=null){
					move.xTo = end.x;
					move.yTo = end.y;
				}else{
					move.xTo = cardcpt.getVisibleRect().x;
					move.yTo = cardcpt.getVisibleRect().y;
				}
				
				move.addEventListener(EffectEvent.EFFECT_END, cardMotionComplate);
				move.play();
			}
			
			
			public function StopMotionList():void
			{
				var move:Move = cur_move;
				cur_move = null;
				if (move!=null){
					var move_card:Card_Move = move.target as Card_Move;
					move.stop();
					if (move_card!=null){
						if (move_card.parent == this){
							removeChild(move_card);
						}
						
						if (move_card.curCardCpt!=null){
							move_card.curCardCpt.isShow = true;
						}
						while (move_card.nextCardm!=null){
							move_card = move_card.nextCardm;
							move_card.curCardCpt.isShow = true;
							
						}
					}
				}
				
				
			}
			
			[Bindable]
			public function getLeftCardColor():uint
			{
				if (Server.game.leftCard<10) {
					return 0xffFF0000;
				} else {
					return 0xffFFFEFE;
				}
			}
			
//			
//			public function selectCard(card:Card_Cpt):void
//			{
//				if (card.card == null)return;
//				selected_card.removeAll();
//				var move_card:Card_Move = new Card_Move();
//				move_card.setCurCardCpt(card);
//				card.isSelected = true;
//				card.isAlpha = true;
//				selected_card.addItem(move_card);
//				startFollow();
//				trace("selectCard");
//			}
//			
//			public function selectCards(cards:ArrayCollection):void
//			{
//				if (cards == null || cards.length == 0)return;
//				selected_card.removeAll();
//				var move_card:Card_Move;
//				for each(var card:Card_Cpt in cards){
//					move_card = new Card_Move();
//					move_card.setCurCardCpt(card);
//					card.isSelected = true;
//					card.isAlpha = true;
//					selected_card.addItem(move_card);
//				}
//				startFollow();
//			}
//			
//			public function addSelectCard(card:Card_Cpt):void
//			{
//				if (card.card == null)return;
//				var move_card:Card_Move = new Card_Move();
//				move_card.setCurCardCpt(card);
//				card.isSelected = true;
//				//				card.isShow = false;
//				if (selected_card.length==0){
//				}
//				selected_card.addItem(move_card);
//				trace("addSelectCard");
//			}
//			
//			public function getSelectCards():ArrayCollection
//			{
//				return selected_card;
//			}
//			public function getSelectedCards() : ArrayCollection
//			{
//				return selected_card;
//			}
//			
//			public function cleanSelectCard():void
//			{
//				if (selected_card.length>0){
//					for each(var cm:Card_Move in selected_card){
//						if (cm.curCardCpt!=null){
//							cm.curCardCpt.card = null;
//							cm.curCardCpt.isAlpha = false;
//							cm.curCardCpt.isSelected = false;
//							cm.curCardCpt = null;
//						}
//						removeChild(cm);
//					}
//				}
//				selected_card.removeAll();
//				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
//				removeEventListener(MouseEvent.MOUSE_UP, mouseUp);
//			}
//			
//			public function selectCardCancel():void
//			{
//				if (selected_card.length>0){
//					for each(var cm:Card_Move in selected_card){
//						if (cm.curCardCpt!=null){
//							cm.curCardCpt.isAlpha = false;
//							cm.curCardCpt.isSelected = false;
//						}
//						removeChild(cm);
//					}
//					selected_card.removeAll();
//					removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
//					removeEventListener(MouseEvent.MOUSE_UP, mouseUp);
//				}
//			}
//			
//			public function isSelectedCard():Boolean
//			{
//				return selected_card.length>0;
//			}
//			
//			private function startFollow():void
//			{
//				removeEventListener(MouseEvent.MOUSE_UP, mouseUp);
//				if (selected_card.length>0){
//					for each(var cm:Card_Move in selected_card){
//						addChild(cm);
//						cm.curCardCpt.isAlpha = true;
//					}
//					setSelectCardPos(mouseX, mouseY);
//				}
//			}
			
			protected function mouseUp(event:MouseEvent):void
			{
				selected_cards.startFollow();
//				selected_cards.x = mouseX;
//				selected_cards.y = mouseY;
				selected_cards.move(mouseX, mouseY);
				
//				event.updateAfterEvent();
			}
			
			protected function mouseMove(event:MouseEvent):void
			{
//				setSelectCardPos(event.stageX, event.stageY);
				if (selected_cards.isSelectedCard()) {
					selected_cards.move(mouseX, mouseY);
				}
				//selected_cards.x = mouseX;
				//selected_cards.y = mouseY;
				
//				event.updateAfterEvent();
//				trace("mouseMove");
			}
			
//			private function setSelectCardPos(x:int, y:int):void
//			{
//				var X:int = x;
//				var Y:int = y;
//				
//				for each(var cardm:Card_Move in selected_card)
//				{
//					cardm.x = X - cardm.width/2;
//					cardm.y = Y - cardm.height/2;
//					X += cardm.width+1;
//				}
//			}
			
			public function playRoundStartMoiveClip() : void
			{
				addChild(beginSwf);
				beginSwf.gotoAndPlay(beginSwf.movie().mc, 2, null, true);
			}
			
			public function playFireMoiveClip() : void
			{
				addChild(yhSwf);
				setTimeout(stopFireMoiveClip, 15000);
			}
			public function stopFireMoiveClip() : void
			{
				if (contains(yhSwf)) {
					removeChild(yhSwf);
				}
			}
			
			public function cleanCardState():void
			{
				selected_cards.selectCardCancel();
				game.cleanShadow();
				game.gamer.cleanShadow();
			}
			
			public function cardClick(card:Card_Cpt):void 
			{
			}

			protected function canvas1_enterFrameHandler(event:Event):void
			{
				
			}

		]]>
	</mx:Script>
	
	
	

	<mx:Canvas y="96" 
			   borderSkin="@Embed(source='../image/bg/desk.png')" 
			   width="670" height="302" horizontalCenter="0">
		<ns1:CardMatrixCpt id="mx" y="22"  height="258" x="23" width="627">
		</ns1:CardMatrixCpt>
	</mx:Canvas>
	

	
	<mx:ProgressBar id="sumbar" width="469" label=""  height="5" 
					mode="manual"
					labelPlacement="center" y="402" x="244"  visible="{!Server.isVisitor}" trackSkin="{Resource.ProgressBarBg}"/>
	
	<mx:ProgressBar id="optbar" height="5" label="" width="469"
					mode="manual"
					labelPlacement="center" x="244" y="409"  visible="{!Server.isVisitor}" trackSkin="{Resource.ProgressBarBg}"/>
	
	<ns1:CardMatrixCpt id="umx" height="135" x="245" y="464" width="467"  visible="{!Server.isVisitor}">
	</ns1:CardMatrixCpt>
	
	
	
	<!--信息显示 -->
	
	
	<!--//其他玩家信息-->
	<ns1:OtherPlayer_Cpt id="nextPlayer1" x="8" y="200">
	</ns1:OtherPlayer_Cpt>
	
	<ns1:OtherPlayer_Cpt id="nextPlayer2" y="-1" horizontalCenter="0">
	</ns1:OtherPlayer_Cpt>
	
	<ns1:OtherPlayer_Cpt id="nextPlayer3" x="825" y="200">
	</ns1:OtherPlayer_Cpt>
	
	<ns1:OtherPlayer_Cpt id="nextPlayer4" y="411" horizontalCenter="0" visible="{Server.isVisitor}">
	</ns1:OtherPlayer_Cpt>
	
	
	
	
	<!--//游戏信息区-->
	<!--
	<mx:Canvas x="10" y="28" width="143" height="81" borderStyle="none"  borderColor="#000000">
	
	<mx:Label x="10" y="10" text="{LanguageManager.getText('lami.yxxx')}" color="#FFFDFD" visible="false"/>  
	<mx:Label x="45" y="39" text="{LanguageManager.getText('lami.syps')}:{Server.game.leftCard}" color="#FFFEFE"/>  
	<mx:Image x="10" y="32" width="30" height="35" source="{Resource.pai}" id="cardstack"/>
	<mx:Image x="13" y="35" width="30" height="35" source="{Resource.pai}"/>
	<mx:Image x="16" y="38" width="30" height="35" source="{Resource.pai}"/>
	
	</mx:Canvas>
	-->
	
	<!--玩家信息区-->
	
	<mx:Canvas id="useinfo" width="469" height="45" x="244" y="416"  visible="{!Server.isVisitor}"
			   verticalScrollPolicy="off" horizontalScrollPolicy="off" borderSkin="@Embed(source='../image/bg/wood_bar.png')">
		
		<mx:Label x="12" verticalCenter="0" text="{game.gamer.isMyturn?LanguageManager.getText('lami.yxz'):LanguageManager.getText('lami.ddz')}" fontWeight="bold" color="#FCF300" fontSize="14" width="68" textAlign="center">   <!--游戏中  等待中-->
			<mx:filters>
				<mx:DropShadowFilter>
				</mx:DropShadowFilter>
			</mx:filters>
		</mx:Label>
		
		<mx:Label x="80" verticalCenter="0" text="{game.gamer.isCold?LanguageManager.getText('lami.wpb'):LanguageManager.getText('lami.ypb')}" fontWeight="bold" color="#89F8FF" fontSize="14" width="68" textAlign="center"> <!--未破冰 已破冰-->
			<mx:filters>
				<mx:DropShadowFilter>
				</mx:DropShadowFilter>
			</mx:filters>
		</mx:Label>
		<!--
		<mx:Image x="100" y="16" source="{game.gamer.isMyturn?Resource.yxz:Resource.ddz}" ></mx:Image>
		<mx:Label x="7" y="17" text="手牌：{game.gamer.handCard.length}" color="#010101"/>
		<mx:Image x="100" y="2" source="{game.gamer.isCold?Resource.wpb:Resource.ypb}" > </mx:Image>
		-->	
		<ns1:Opt_Cpt id="optCpt" height="40" y="3" x="158"  visible="{!Server.isVisitor}">
		</ns1:Opt_Cpt>

	</mx:Canvas>
	
	<!--玩家操作区-->
	
	<mx:Canvas id="sysinfo" 
			   x="7" y="399" alpha="0.5" 
			   borderSkin="@Embed(source='../image/bg/chat_bg.png')" 
			   width="230" height="195">
		<mx:TextArea  id="TA_gameinfoStr"  x="5" y="6" color="0xffffff" width="220" height="185" backgroundAlpha="0.0" borderStyle="none"  editable="false" text="{gameinfoStr}" verticalScrollBarStyleName="VScrollBar" />
	</mx:Canvas>
	
	<mx:Canvas id="chatinfo"
			   x="720" y="400" alpha="0.5" 
			   borderSkin="@Embed(source='../image/bg/chat_bg.png')" 
			   width="230" height="195">
		<mx:TextArea  id="TA_talkinfoStr"  x="5" y="6" width="220" height="150"   backgroundAlpha="0.0" borderStyle="none"  color="0xffffff" editable="false"  text="{talkinfoStr}" verticalScrollBarStyleName="VScrollBar">
		</mx:TextArea>
		<mx:Canvas x="5" y="160" height="29" width="221" borderSkin="@Embed(source='../image/bg/chat_send.png')">
			<mx:Button x="164" y="4" click="pubTalk()" width="56" buttonMode="true"  height="24"  styleName="opButton" 
					   label="{LanguageManager.getText('image.submit')}" color="#FFFFFF" fontWeight="bold"/>
			<mx:TextInput  color="0xffffff" id="titalk" x="5" y="4" width="152" alpha="0.5" backgroundColor="0xD2A55A" borderColor="0x8B5505" themeColor="#BF7204" cornerRadius="3" borderStyle="solid"/>
		</mx:Canvas>
	</mx:Canvas>
	
	
	<!--左上角玩家信息-->
	<mx:Canvas id="top_left_bar" x="0" y="0" width="331" height="27" borderStyle="none" borderSkin="@Embed(source='../image/bg/top_bar.png')">
		<mx:Image source="{Resource.gold}" x="178" width="29" height="27" y="1"></mx:Image>
		<!--
		// todo 性别图标  
		// 女 Resource.picon_female 
		// 男 Resource.picon_male 
		-->
		<mx:Image source="{
				  Resource.picon_male
				  }" x="2" width="21" height="25" y="1"></mx:Image>
		<mx:Label text="{Server.player.score}" color="#FEFEFE"   x="211" width="110" textAlign="left" y="3" height="22"/>
		<mx:Label text="{
				  Server.getPlayerName(Server.player) + 
				  ' (' + LanguageManager.getText('lami.dj') + Server.player.level + ')'
				  }" color="#FFFFFF" x="29" width="141" fontWeight="normal" y="3" height="22"/>
	</mx:Canvas>

	
	<!--右上角房间信息-->
	<mx:Canvas id="top_right_bar" x="627" y="0" width="331" height="27" borderStyle="none" borderSkin="@Embed(source='../image/bg/top_bar.png')">
		<mx:Label x="122" text="{
				  StringUtil.format(LanguageManager.getText('lami.fj'),
						Server.getRoomCpt().room.getRoomID(),
				 		desk.getDeskID())
				  }" color="#FDFDFD" y="3" textAlign="right"/> 
		<!--当前位置 房间  号座-->
		<mx:LinkButton x="242" verticalCenter="-1" styleName="alertButton"  label="{LanguageManager.getText('lami.hddt')}" color="#FFFDFD" click="returnRoom()" width="88" height="22"/>
	</mx:Canvas>

	<!--回合开始
	color="{getLeftCardColor()}" 
	visible="{isStartedGame()}"-->
	<mx:Label x="84" y="56" text="{Server.game.leftCard}" 
			  width="61" height="31" 
			  fontFamily="Arial" fontSize="20" fontWeight="bold" textAlign="left" color="#F1F1F1"/>
	<mx:Image x="0" y="36" width="81" height="70" 
			  source="@Embed(source='../image/cardsleft.png')" id="cardstack"/>
	
	<ns1:CardMouseMoveCpt id="selected_cards" x="151" y="35">
	</ns1:CardMouseMoveCpt>
	
	<!--
	<mx:SWFLoader id="beginSwf" source="@Embed(source='../image/start.swf')"></mx:SWFLoader>
	
	<mx:SWFLoader id="yhSwf" source="@Embed(source='../image/fireworks.swf')" horizontalCenter="0" verticalCenter="0" visible="false"></mx:SWFLoader>
	-->
	
</mx:Canvas>

<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		  xmlns:ns1="Component.*" width="960" height="600" 
		   borderStyle="solid" borderColor="0x000000" backgroundColor="0xffffff"   styleName="taskDetailBG"
		   verticalCenter="0" horizontalCenter="0" verticalScrollPolicy="off" horizontalScrollPolicy="off" creationComplete="initEvent()"  >
	
	<mx:Script>
		<![CDATA[
			import Class.Game;
			import Class.Model.Card;
			import Class.Model.Desk;
			import Class.Model.Player;
			import Class.Resource;
			import Class.Server;
			import Class.TimesCtr;
			import Class.WebResource;
			
			import com.fc.lami.Messages.CardData;
			import com.fc.lami.Messages.GameOverNotify;
			import com.fc.lami.Messages.PlayerData;
			
			import mx.controls.Alert;
			import mx.effects.Move;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.graphics.RoundedRectangle;
			
			[Bindable]
			public var desk:Desk;
			
			public var player:PlayerData; //玩家
			[Bindable]
			public var seatID:int;
			
			public var nextOtherPlayer_Cpt:OtherPlayer_Cpt;
			
			[Bindable]
			public var game:Game
			
			[Bindable]
			public var talkinfoStr:String=""; 
			
			[Bindable]
			public var gameinfoStr:String="";
			
			public var resetCpt:Reset_Cpt;
			public var canReset:Boolean = false;
			public var canShowReset:Boolean = false;
			//初始游戏
			public function init():void
			{
				game.matrix = mx;
				game.gamer.matrix = umx;
				game.timeCtr.optionTimeBar = optbar;
				game.timeCtr.sumTimeBar = sumbar;
				optCpt.game = game;
				game.initGame();
			}
			
			public function initEvent():void
			{
				addEventListener(KeyboardEvent.KEY_DOWN,keyDownHandle)
			}
			
			public function keyDownHandle(event:KeyboardEvent):void
			{
				 if( event.keyCode==13&&titalk.text!='')
				 {
					 pubTalk(); 
				 }
			}
			
			
			
			public function initDesk(desk:Desk,playerstats:Array):void
			{
				if(game.matrix==null)
				{
					init();
				}
				nextPlayer1.reset();
				nextPlayer2.reset();
				nextPlayer3.reset();
				nextPlayer4.reset();
				resetGameAllData();
				optCpt.reset();
				player = Server.player;
				game.isStarted = desk.is_started;
				initSeat(desk,playerstats);
			}
			
			
			//进入一个新房间后对所有数据进行重置
			public function resetGameAllData():void
			{
				game.cleanMatrix();
				game.gamer.cleanMatrix();
				game.gamer.isMyturn = false;
				game.gamer.isReady = false;
				game.gamer.isCold = true;
				game.legaled = true;
				game.haveSendCard = false;
				game.timeCtr.stop();
				
				
			}
			
			//初始位置
			public function initSeat(desk:Desk,playerstats:Array):void
			{
				nextOtherPlayer_Cpt = nextPlayer1;
				nextPlayer1.nextOtherPlayer_Cpt = nextPlayer2;
				nextPlayer2.nextOtherPlayer_Cpt = nextPlayer3;
				nextPlayer3.nextOtherPlayer_Cpt = nextPlayer4;
				
				this.desk = desk;
				switch(player.player_id)
				{
					case desk.player_E_id: seatID = 3;break;
					case desk.player_N_id: seatID = 0;break;
					case desk.player_S_id: seatID = 2;break;
					case desk.player_W_id: seatID = 1;break;
				}
				var cpt:OtherPlayer_Cpt = nextOtherPlayer_Cpt;
				var index:int = seatID;
				do{
					index ++;
					if(index==4)
						index = 0;
					cpt.player = Server.getPlayer(getPlayerIDbySeatID(index));
					cpt.setState(playerstats);
					
					cpt.seat = getDir(index);
					cpt = cpt.nextOtherPlayer_Cpt;
				}
				while(cpt != null)
			}
			
			//根据座位号获取选手
			private function getPlayerIDbySeatID(seatID:int):int
			{
				switch(seatID)
				{
					case 3: return desk.player_E_id;
					case 0: return desk.player_N_id;
					case 2: return desk.player_S_id;
					case 1: return desk.player_W_id;
				}
				return -1;
			}
			
			//根据座位号设置选手
			private function setPlayerIDbySeatID(seatID:int,playerID:int):void
			{
				switch(seatID)
				{
					case 3: desk.player_E_id = playerID;break;
					case 0: desk.player_N_id = playerID;break;
					case 2: desk.player_S_id = playerID;break;
					case 1: desk.player_W_id = playerID;break;
				}
			}
			
			//根据座位号获取方向
			public function getDir(seatID:int):String
			{
				switch(seatID)
				{
					case 0: return "南";
					case 1: return "西";
					case 2: return "北";
					case 3: return "东";
				}
				return "false";
			}
		    			
			//有人员进入
			public function enterPlayer(player_id:int, desk_id:int, seat:int):void
			{
				if(desk ==null || desk_id!=desk.desk_id)
					return;
				
				initSeat(desk,null);
				addInfo(Server.getPlayerName(Server.getPlayer(player_id))+"进入桌子");
			}
			
			
			//有人员离开
			public function leavePlayer(player_id:int, desk_id:int):void
			{
				if(desk ==null || desk_id!=desk.desk_id)
					return	;
//				initSeat(desk,null);
				var opc:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(player_id);
				opc.player = null;
				addInfo(Server.getPlayerName(Server.getPlayer(player_id))+"离开桌子");
			}
			
			
			public function click():void
			{
				//LamiAlert.show(Game.getSendPoint().toString()+'_'+Game.gamer.keydwon);
			}
			
			public function addInfo(str:String):void
			{
				gameinfoStr =   gameinfoStr  + str + "\n" ;
				TA_gameinfoStr.validateNow();
				TA_gameinfoStr.verticalScrollPosition=TA_gameinfoStr.maxVerticalScrollPosition;
				
				
			}
			
			public function addTalkInfo(str:String):void
			{
				talkinfoStr = talkinfoStr  + str + "\n";
				TA_talkinfoStr.validateNow(); 
				TA_talkinfoStr.verticalScrollPosition=TA_talkinfoStr.maxVerticalScrollPosition;		
				
				//LamiAlert.show(TA_talkinfoStr.verticalScrollPosition +'/' +TA_talkinfoStr.maxVerticalScrollPosition)
			}
			
			//回到房间
			public function returnRoom():void
			{
				//this.visible = false;
//				Server.app.removeChild(this);
				Server.leaveDesk();
				
			}
			
			//响应回到房间
			public function stopTime():void
			{
				nextPlayer1.gameing = false;
				nextPlayer2.gameing = false;
				nextPlayer3.gameing = false;
				nextPlayer4.gameing = false;
				
				Server.game.timeCtr.stop();
			}
			
			
			//根据用户ID获取用户组建
			public function getOtherPlayerCptByPlayerId(playerid:int):OtherPlayer_Cpt
			{
				var cpt:OtherPlayer_Cpt = nextPlayer1;
				do{
					if(cpt.player!=null && cpt.player.player_id==playerid)
					{
						return cpt;
					}
					cpt = cpt.nextOtherPlayer_Cpt;
				}
				while(cpt!=null)
				return null	
			}
			
			//有人员破冰
			public function onPlayerPoBing(playerid:int):void
			{
				if (playerid == Server.player.player_id){
					game.gamer.isCold = false;
				}else{
					var cpt:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(playerid);
					if(cpt!=null)
						cpt.pobing = true;
				}
				addInfo("玩家"+Server.getPlayerName(Server.getPlayer(playerid))+"已经破冰");
			}
			
			//有人员准备取消
			public function onPlayerReady(playerid:int,isReady:Boolean):void
			{
				if (playerid == Server.player.player_id){
					game.gamer.isReady = isReady;
				}else{
					var cpt:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(playerid);
					if(cpt!=null)
						cpt.ready = isReady;
				}
				
				if(isReady)
				{
					addInfo("玩家"+Server.getPlayerName(Server.getPlayer(playerid))+"准备好了");
				}
				else
				{
					addInfo("玩家"+Server.getPlayerName(Server.getPlayer(playerid))+"取消了准备");
				}
			}
			
			//有人员会合开始
			public function onPlayerStart(playerid:int):void
			{
				var cpt:OtherPlayer_Cpt = getOtherPlayerCptByPlayerId(playerid);
				if(cpt!=null)
				{
					cpt.gameing = true;
					addInfo("玩家"+Server.getPlayerName(cpt.player)+"回合开始");
				}
			}
			
			//游戏结束
			public function onGameOver(gvn:GameOverNotify):void
			{
				addInfo("游戏结束");
				
				stopTime();
				var rsCpt:Result_Cpt = new Result_Cpt()
				optCpt.reset();	
					
				rsCpt.setRes(gvn);
				rsCpt.setStyle("verticalCenter","0");
				rsCpt.setStyle("horizontalCenter","0");	
				addChild(rsCpt);
				rsCpt.addEventListener(FlexEvent.REMOVE,removeResultHandle);
				//resetGameAllData();
			}
			
			
			public function removeResultHandle(event:Event):void
			{
				nextPlayer1.gameEnd();
				nextPlayer2.gameEnd();
				nextPlayer3.gameEnd();
				nextPlayer4.gameEnd();
				resetGameAllData();
			}
			
			
			
			public function onGameStart(canReset:Boolean):void
			{
				addInfo("游戏开始");
				if(resetCpt!=null)
					removeReset();
				
				optCpt.Start();
				
				this.canReset = canReset;
				canShowReset = true;
				nextPlayer1.gameStart();
				nextPlayer2.gameStart();
				nextPlayer3.gameStart();
				nextPlayer4.gameStart();
			}
			
			
			public function showReset():void
			{
				if(!canShowReset)
					return
				else	
					canShowReset = false
					
				if(resetCpt!=null)
					removeReset();
				
				resetCpt = new Reset_Cpt();
				resetCpt.canReset = canReset;
				resetCpt.setStyle("verticalCenter","0");
				resetCpt.setStyle("horizontalCenter","0");	
				addChild(resetCpt);
			}

			public function removeReset():void
			{
				removeChild(resetCpt)
				resetCpt = null;
			}
			
			public function pubTalk():void
			{
				if(titalk.text=="")
					return;
					
				if (Server.sendTalkMessage(titalk.text))
					titalk.text='';
			}
			
			public function onPlayerReset(player:PlayerData):void
			{
				addInfo(Server.getPlayerName(player)+"重置了发牌")
			}
			
			public function addCardMotion(card:Card):void
			{
				var moveCard:Card_Cpt = new Card_Cpt();
				addChild(moveCard);
				moveCard.isShow = true;
				moveCard.x = cardstack.getVisibleRect().x;
				moveCard.y = cardstack.getVisibleRect().y;
				moveCard.card = new Card(card.point,card.type, card.id);
				moveCard.card.nextCard  = card.nextCard;
				moveCard.nextCardCpt = card.cardUI;
				
				var move:Move = new Move();
				
				move.target = moveCard;
				move.duration = 300;
				
				move.xTo = card.cardUI.getVisibleRect().x;
				move.yTo = card.cardUI.getVisibleRect().y;
				
				//			//card.isSended = false;
				card.nextCard = null;
				move.addEventListener(EffectEvent.EFFECT_END,addCardMotionComplate);
				move.play();
			}
			
			public function moveCardMotion(card:CardData, start:Rectangle, end:Rectangle):void
			{
				var moveCard:Card_Cpt = new Card_Cpt();
				addChild(moveCard);
				moveCard.isShow = true;
				moveCard.x = start.x;
				moveCard.y = start.y;
				moveCard.card = new Card(card.point,card.type, card.id);
				moveCard.card.nextCard  = null;
				moveCard.nextCardCpt = game.getCardCpt(card.x, card.y);
				if (moveCard.nextCardCpt!=null){
					moveCard.nextCardCpt.isShow = false;
				}
				
				var move:Move = new Move();
				
				move.target = moveCard;
				move.duration = 300;
				
				move.xTo = end.x;
				move.yTo = end.y;
				
				//			//card.isSended = false;
				move.addEventListener(EffectEvent.EFFECT_END,addCardMotionComplate);
				move.play();
			}
			
			public function addCardMotionComplate(event:EffectEvent):void
			{
				var move:Move = event.target as Move;
				var card:Card_Cpt = move.target as Card_Cpt;
				removeChild(card);
				
				if (card.nextCardCpt!=null){
					card.nextCardCpt.isShow = true;
				}
				if(card.card.nextCard!=null)
				{
					addCardMotion(card.card.nextCard);
				}
				else
				{
					showReset();
					game.gamer.canOpearation = true;
				}
			}
		]]>
	</mx:Script>
	
	
	
	<mx:Image  source="{Resource.newbg}" y="93" horizontalCenter="0">
	</mx:Image>
	
	<ns1:Matrix_Cpt id="mx" y="120"  height="201" horizontalCenter="1">
	</ns1:Matrix_Cpt>
	
	<mx:ProgressBar id="sumbar" width="469" label=""  height="5" 
					mode="manual"
					labelPlacement="center" y="408" x="244"  visible="{!Server.isVisitor}" trackSkin="{Resource.ProgressBarBg}"/>
	
	<mx:ProgressBar id="optbar" height="5" label="" width="469"
					mode="manual"
					labelPlacement="center" x="244" y="415"  visible="{!Server.isVisitor}" trackSkin="{Resource.ProgressBarBg}"/>
	
	<ns1:UserMatrix_Cpt id="umx" height="201" x="245" y="420" width="484"  visible="{!Server.isVisitor}">
	</ns1:UserMatrix_Cpt>
	

	
	<!--信息显示 -->
	
	
	<!--//其他玩家信息-->
	<ns1:OtherPlayer_Cpt id="nextPlayer1" x="8" y="200">
	</ns1:OtherPlayer_Cpt>
	
	<ns1:OtherPlayer_Cpt id="nextPlayer2" y="-1" horizontalCenter="0">
	</ns1:OtherPlayer_Cpt>
	
	<ns1:OtherPlayer_Cpt id="nextPlayer3" x="825" y="200">
	</ns1:OtherPlayer_Cpt>
	
	<ns1:OtherPlayer_Cpt id="nextPlayer4" y="415" horizontalCenter="0" visible="{Server.isVisitor}">
	</ns1:OtherPlayer_Cpt>
	

	

	<!--//游戏信息区-->
	<mx:Canvas x="10" y="28" width="143" height="81" borderStyle="none"  borderColor="#000000">
		
		<mx:Label x="10" y="10" text="游戏信息" color="#FFFDFD" visible="false"/>
		<mx:Label x="45" y="39" text="剩余牌数:{Server.game.leftCard}" color="#FFFEFE"/>
		<mx:Image x="10" y="32" width="30" height="35" source="{Resource.pai}" id="cardstack"/>
		<mx:Image x="13" y="35" width="30" height="35" source="{Resource.pai}"/>
		<mx:Image x="16" y="38" width="30" height="35" source="{Resource.pai}"/>
		
	</mx:Canvas>
	
	<!--玩家信息区-->
	
	<mx:Canvas id="useinfo" width="472" height="45" x="242" y="422"  visible="{!Server.isVisitor}"
			   verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundImage="{Resource.wood_bar}">
		
		<mx:Label x="27" verticalCenter="0" text="{game.gamer.isMyturn?'游戏中':'等待中'}" fontWeight="bold" color="#FCF300" fontSize="14">
			<mx:filters>
				<mx:GlowFilter color="#000000" strength="10" quality="10" alpha="0.5"></mx:GlowFilter>
			</mx:filters>
		</mx:Label>
		
		<mx:Label x="85" verticalCenter="0" text="{game.gamer.isCold?'未破冰':'已破冰'}" fontWeight="bold" color="#FCF300" fontSize="14">
			<mx:filters>
				<mx:GlowFilter color="#000000" strength="10" quality="10" alpha="0.5"></mx:GlowFilter>
			</mx:filters>
		</mx:Label>
		<!--
		<mx:Image x="100" y="16" source="{game.gamer.isMyturn?Resource.yxz:Resource.ddz}" ></mx:Image>
		<mx:Label x="7" y="17" text="手牌：{game.gamer.handCard.length}" color="#010101"/>
		<mx:Image x="100" y="2" source="{game.gamer.isCold?Resource.wpb:Resource.ypb}" > </mx:Image>
		-->	
	</mx:Canvas>
	
	<!--玩家操作区-->
	<ns1:Opt_Cpt id="optCpt" height="177" y="426" x="400"  visible="{!Server.isVisitor}">
	</ns1:Opt_Cpt>
	
	<mx:Image source="{Resource.talkbg}" x="720" y="403" alpha="0.5"></mx:Image>
	<mx:Image source="{Resource.chat_send}" x="725" y="566" height="29" width="344"></mx:Image>
	<mx:TextArea  id="TA_talkinfoStr"  x="725" y="412" width="220" height="150"   backgroundAlpha="0.0" borderStyle="none"  color="0xffffff" editable="false"  text="{talkinfoStr}" verticalScrollBarStyleName="VScrollBar">
	</mx:TextArea>
	
	<mx:Image source="{Resource.talkbg}" x="7" y="404" alpha="0.5"></mx:Image>
	
	<mx:TextArea  id="TA_gameinfoStr"  x="12" y="411" color="0xffffff" width="220" height="185" backgroundAlpha="0.0" borderStyle="none"  editable="false" text="{gameinfoStr}" verticalScrollBarStyleName="VScrollBar" />
	
	<mx:Button x="890" y="566" click="pubTalk()" width="49" buttonMode="true" skin="@Embed(source='../image/button/tj.png')"  height="28" downSkin="@Embed(source='../image/button/tj1.png')"/>
	<mx:TextInput  color="0xffffff" id="titalk" x="732" y="569" width="152" alpha="0.5" backgroundColor="0xD2A55A" borderColor="0x8B5505" themeColor="#BF7204" cornerRadius="3" borderStyle="solid"/>
	
	<!--左上角玩家信息-->
	<mx:Canvas x="0" y="0" width="331" height="27" backgroundImage="{Resource.top_bar}" borderStyle="none">
		<mx:Label text="{Server.getPlayerName(Server.player)}" color="#FFFFFF" x="8" verticalCenter="0"   />
		<mx:Label text="等级：{Server.player.level}" color="#FEFEFE"   x="128" verticalCenter="0" />
		<mx:Image source="{Resource.gold}" x="202" verticalCenter="0"></mx:Image>
		<mx:Label text="{Server.player.score}" color="#FEFEFE"   x="230" verticalCenter="0" />
	</mx:Canvas>

	
	<!--右上角房间信息-->
	<mx:Canvas x="627" y="0" width="331" height="27" backgroundImage="{Resource.top_bar}" borderStyle="none">
		<mx:Label x="31" verticalCenter="0"  text="{'当前位置:'+(Server.room_cpt.room.roomData.room_id + 1)+'房间 '+ (desk.desk_id+1)+'号座'}" color="#FDFDFD"/>
		<mx:LinkButton x="233" verticalCenter="0"  label="回到大厅" color="#FFFDFD" click="returnRoom()"/>
	</mx:Canvas>

	<!--回合开始 -->
	<mx:SWFLoader id="beginSwf" source="{WebResource.startSwf}"></mx:SWFLoader>
</mx:Canvas>

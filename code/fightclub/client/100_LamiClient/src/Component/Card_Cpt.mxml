<?xml version="1.0" encoding="utf-8"?>

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="26" height="32"
		   
		   borderColor="{isSelected?0xff0000:0x000000}"
		   borderStyle="none"
		   
		   verticalScrollPolicy="off" horizontalScrollPolicy="off"
		   
		   click="click(event)" doubleClick="click(event)"  doubleClickEnabled="true"
		   
		   mouseOver="mouseOver(event)"   mouseOut="mouseOut(event)"
		   backgroundAlpha="0.0"
		    initialize="initalize(event)" enterFrame="update(event)">
	
	<mx:Script>
		<![CDATA[
			import Class.Game;
			import Class.Model.Card;
			import Class.Resource;
			import Class.Server;
			import Class.TimesCtr;
			
			import com.fc.lami.ui.LamiSwfLoader;
			import com.greensock.OverwriteManager;
			import com.greensock.TweenLite;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.messaging.messages.ISmallMessage;
			import mx.states.SetStyle;
			
			//[Bindable]
			//public var confimcard:Card
				
			[Bindable]
			private var card:Card
			
			[Bindable]
			public var isPlayerOwner:Boolean = false;
			
			public var cardX:int;
			public var cardY:int;
			
			
			[Bindable]
			public var game:Game
			
			
			
			[Bindable]
			private var _isSelected:Boolean = false; 
			
			[Bindable]
			private var _isShow:Boolean = true;
//			
//			[Bindable]
//			public var isAlpha:Boolean = false;
//			
//			[Bindable]
//			public var isShadow:Boolean = false;
			
			public var tl:TweenLite;//牌的移动效果;
			
				
			private var light : LamiSwfLoader = new LamiSwfLoader(Resource.guang);
//			<mx:SWFLoader width="50" height="100" y="5" source="{Resource.guang}" 
//			visible="{isSelected}"></mx:SWFLoader>
						
			
			
			protected function initalize(event:FlexEvent):void
			{
				light.width = 50;
				light.height = 100;
				light.y = 5;
				// TODO Auto-generated method stub
			}
			
			
			public function confim():void
			{
				//			confimcard = card;
			}
			
			[Bindable]
			public function getCard():Card
			{
				return card;
			}
			
			public function setCard(c:Card):void
			{
				//resetBg();
				
				if(c!=null)
				{
					img0.source = Resource.getCardImg(c.type,c.point);
				}
				else
				{
					img0.source = "";
				}
				
				card = c;
				setShadow(false);
			}
			
			public function set isShow(i:Boolean):void
			{
				_isShow = i;
				setShadow(false);
			}
			
			[Bindable]
			public function get isSelected() : Boolean
			{
				return _isSelected;
			}
			
			public function set isSelected(b:Boolean) : void
			{
				this._isSelected = b;
				if (b) {
					if (!contains(light)) {
						addChild(light);
					}
				} else {
					if (contains(light)) {
						removeChild(light);
					}
				}
			}
			
			
			public function mouseOver(event:MouseEvent):void
			{
				
				if(game==null)
				{
					return;
				}
				
				//不允许非自己回合往公共牌区操作
				if(!isPlayerOwner && !game.gamer.isMyturn)
				{
					return;
				}
				
				if (card == null && game.lami.selected_cards.isSelectedCard())
				{
					//trace("SelectedCard");
				}
				
				//鼠标滑动
				if(event.buttonDown)
				{
					mouseOut(event);
					return;
				}
				else if (game.lami.selected_cards.isSelectedCard())
				{
					game.cleanShadow();
					game.gamer.cleanShadow();
					if (isPlayerOwner){
						game.gamer.putCardsShadow(game.lami.selected_cards.getSelectCards(),cardX, cardY);
					}else{
						game.putCardsShadow(game.lami.selected_cards.getSelectCards(),cardX, cardY);
					}
				}
				else
				{
					game.cleanShadow();
					game.gamer.cleanShadow();
				}
				
			}
			
			public function mouseOut(event:MouseEvent):void
			{
				
				//鼠标滑动
				if(event.buttonDown)
				{
					
					//不能在非自己回合去滑动公共牌区
					if(!isPlayerOwner && (!game.gamer.isMyturn))
					{
						return;
					}
					
					if(isPlayerOwner && card!=null && card.isSended) 
					{
						return;
					}
					
					if (!isSelected){
						game.lami.selected_cards.addSelectCard(this);
					}
					return;
				}
			}
			
			public function click(event:MouseEvent):void
			{
				if(!isPlayerOwner && (!game.gamer.isMyturn))
				{
					return;
				}
				
				if(isPlayerOwner && card!=null && card.isSended) 
				{
					return;
				}
				
					
				if (event.type==MouseEvent.DOUBLE_CLICK){
					if (game.lami.selected_cards.isSelectedCard()){
						if (isPlayerOwner){
							//要检测空格位置是否够
							if (game.gamer.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY)){
								game.lami.cleanCardState();
							}
//							game.gamer.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY);
						}else{
							if (game.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY)){
								game.lami.cleanCardState();
							}
//							game.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY)
						}
					}else{
						if (isPlayerOwner){
							game.lami.selected_cards.selectCards(game.gamer.getCardGroup(cardX, cardY));
						}else{
							game.lami.selected_cards.selectCards(game.getCardGroup(cardX, cardY));
						}
					}
				}else{
					if (game.lami.selected_cards.isSelectedCard()){
						if (isPlayerOwner){
							//要检测空格位置是否够
							if (game.gamer.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY)){
								game.lami.cleanCardState();
							}
//							game.gamer.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY);
						}else{
							if (game.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY)){
								game.lami.cleanCardState();
							}
//							game.putCards(game.lami.selected_cards.getSelectCards(),cardX, cardY);
						}
					}else{
						if (isPlayerOwner){
							game.lami.selected_cards.selectCard(this);
						}else{
							game.lami.selected_cards.selectCard(this);
						}
					}
				}
				
				if(game.cardOwner!=null)
				game.cardOwner.cardClick(this);
			}
			
			
			public function shan():void
			{
				ef.play();
			}
			
			public function setShadow(is_shadow:Boolean):void
			{
				if (is_shadow){
					maskcolor.setStyle('backgroundColor', 0xffffff);
					maskcolor.setStyle('backgroundAlpha', 0.5);
				}
				else if (card==null||_isShow==false){
					if (isPlayerOwner|| game.gamer.isMyturn){
						maskcolor.setStyle('backgroundColor', 0xeadda8);
						maskcolor.setStyle('backgroundAlpha', 0.32);
					}else{
						maskcolor.setStyle('backgroundAlpha', 0.0);
					}
				}
				else if (card!=null){
					if(card.isSended){
						maskcolor.setStyle('backgroundColor', 0x000000);
						maskcolor.setStyle('backgroundAlpha', 0.2);
					}else{
						maskcolor.setStyle('backgroundAlpha', 0.0);
					}
				}
			}
			
			
			protected function update(event:Event):void
			{
				
			}

//			static public const CARD_CPT_STATE_NORMAL:int = 0;
//			static public const CARD_CPT_STATE_SELECTED:int = 1;
//			static public const CARD_CPT_STATE_SHADOW:int = 2;
			
//			public function setState(state:int)
//			{
//				switch (state)
//				{
//					case CARD_CPT_STATE_NORMAL:
//						img0.alpha = 1.0;
//						if (_card==null){
//							mask.visible = false;
//						}else if(_card.isSended){
//							mask.setStyle("backgroundColor", 0x000000);
//							mask.setStyle("backgroundAlpha", 0.2);
//						}
//						break;
//					case CARD_CPT_STATE_SELECTED:
//						if (_card==null){
//							img0.visible = false;
//						}else{
//							img0.alpha = 0.3;
//						}
//						break;
//					case CARD_CPT_STATE_SHADOW:
//						mask.setStyle("backgroundColor", 0xffffff);
//						mask.setStyle("backgroundAlpha", 0.25);
//						break;
//				}
//			}
			

		]]>
	</mx:Script>
	<mx:Image id="img0" visible="{_isShow}" width="25" height="31" alpha="{_isSelected?0.5:1.0}"></mx:Image>
	<mx:Canvas id = "maskcolor" width="25" height="31" backgroundColor="#000000" backgroundAlpha="0.2"></mx:Canvas>
	
	<mx:Glow id="ef" target="{this}" color="0xff0000" repeatCount="5" duration="500" strength="10" ></mx:Glow>
</mx:Canvas>
